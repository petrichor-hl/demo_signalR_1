@page "/"

<PageTitle>Dashboard</PageTitle>

<link rel="stylesheet" type="text/css" href="css/index.css" />

<div class="mx-6 mt-4">
	<h1 style="margin-bottom: 8px">Dashboard</h1>

	<div style="display: flex; gap: 30px; flex-wrap: wrap">

		<div style="flex: 1 0 650px;">

			<div style="font-size: 24px; font-weight:bold; margin-bottom: 4px">Products</div>
			@*
			<MudTable Items="@products" Hover="true" Outlined="true"
					  FixedHeader="true" Height="587px" Style="margin-bottom: 8%"
					  HeaderClass="table-header">
				<HeaderContent>
					<MudTh>ID</MudTh>
					<MudTh>Name</MudTh>
					<MudTh>Category</MudTh>
					<MudTh>Price</MudTh>
				</HeaderContent>
				<RowTemplate>
					<MudTd DataLabel="ID">@context.Id</MudTd>
					<MudTd DataLabel="Name">@context.Name</MudTd>
					<MudTd DataLabel="Category">@context.Category</MudTd>
					<MudTd DataLabel="Price">@context.Price</MudTd>
				</RowTemplate>
			</MudTable> *@

			<div style="height: 611px; overflow-y:scroll; margin-bottom: 60px">
				<table class="content-table">
					<thead>
						<tr>
							<th>ID</th>
							<th>Name</th>
							<th>Category</th>
							<th>Price</th>
						</tr>
					</thead>

					<tbody>

						@for (int i = 0; i < products.Count; ++i)
						{
							<tr>
								<td>@products[i].Id</td>
								<td>@products[i].Name</td>
								<td>@products[i].Category</td>
								<td>@products[i].Price</td>
							</tr>
						}
					</tbody>


				</table>
			</div>

			<MudChart ChartType="ChartType.Donut" LegendPosition="Position.Bottom"
					  Width="300px" Height="300px"
					  InputData="@products.GroupBy(p => p.Category).Select(group => (double)group.Sum(p => p.Price)).ToArray()"
					  InputLabels="@products.Select(p => p.Category).Distinct().ToArray()">

			</MudChart>

		</div>

		<div style="flex: 1 0 750px">

			<div style="font-size: 24px; font-weight:bold; margin-bottom: 4px">Sales</div>

			@* <MudTable Items="@sales" Hover="true" Outlined="true" 
					  FixedHeader="true" Height="587px" Style="margin-bottom: 4%">
				<HeaderContent>
					<MudTh>ID</MudTh>
					<MudTh>Customer</MudTh>
					<MudTh>Amount</MudTh>
					<MudTh>PurchasedOn</MudTh>
				</HeaderContent>
				<RowTemplate>
					<MudTd DataLabel="ID">@context.Id</MudTd>
					<MudTd DataLabel="Name">@context.Customer</MudTd>
					<MudTd DataLabel="Category">@context.Amount</MudTd>
					<MudTd DataLabel="Price">@context.PurchasedOn.ToString("dd/MM/yyyy")</MudTd>
				</RowTemplate>
			</MudTable> *@

			<div style="height: 611px; overflow-y:scroll; margin-bottom: 20px">
				<table class="content-table">
					<thead>
						<tr>
							<th>ID</th>
							<th>Customer</th>
							<th>Amount</th>
							<th>PurchasedOn</th>
						</tr>
					</thead>

					<tbody>

						@for (int i = 0; i < sales.Count; ++i)
						{
							<tr>
								<td>@sales[i].Id</td>
								<td>@sales[i].Customer</td>
								<td>@sales[i].Amount</td>
								<td>@sales[i].PurchasedOn.ToString("dd/MM/yyyy")</td>
							</tr>
						}
					</tbody>


				</table>
			</div>

			<MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Style="font-weight: bold"
					  Width="100%" Height="400px">
			</MudChart>


		</div>

	</div>
</div>



@using Microsoft.AspNetCore.SignalR.Client;
@using demo_signalR_1.Entities;
@using demo_signalR_1.Services;

@inject DashboardService dashboardService;
@inject NavigationManager Navigation;
@inject ISnackbar Snackbar

@implements IDisposable

@code {
	List<Product> products = new();
	List<Sale> sales = new();
	public List<ChartSeries> Series = new();
	public string[] XAxisLabels = Array.Empty<string>();

	private HubConnection? hubConnection;

	protected override async Task OnInitializedAsync()
	{
		products = await dashboardService.GetProducts();
		sales = await dashboardService.GetSales();

		Series = new List<ChartSeries>
		{
			new ChartSeries
			{
				Name = "Sales",
				Data = sales.GroupBy(s => s.PurchasedOn)
							.Select(group => (double)group.Sum(s => s.Amount))
							.ToArray(),
			},
		};

		XAxisLabels = sales.Select(s => s.PurchasedOn.ToString("dd/MM")).Distinct().ToArray();

		hubConnection = new HubConnectionBuilder()
			.WithUrl(Navigation.ToAbsoluteUri("/dashboardHub"))
			.Build();

		hubConnection.On<List<Product>>("RefreshProducts", newProducts =>
		{
			this.products = newProducts;
			InvokeAsync(() =>
			{
				StateHasChanged();
				Snackbar.Add(
					"Product Table has changed", Severity.Success
				);
			});

		});

		hubConnection.On<List<Sale>>("RefreshSales", newSales =>
		{
			this.sales = newSales;
			XAxisLabels = sales.Select(s => s.PurchasedOn.ToString("dd/MM")).Distinct().ToArray();
			Series[0].Data = sales.GroupBy(s => s.PurchasedOn).Select(group => (double)group.Sum(s => s.Amount))
							.ToArray();

			InvokeAsync(() =>
			{
				StateHasChanged();
				Snackbar.Add(
					"Sale Table has changed", Severity.Success
				);
			});
		});

		await hubConnection.StartAsync();

	}

	public void Dispose()
	{
		DisposeHubConnection();
	}

	// Phương thức để ngắt kết nối Hub Connection
	private void DisposeHubConnection()
	{
		if (hubConnection != null)
		{
			hubConnection.DisposeAsync();
			hubConnection = null;
		}
	}

}
